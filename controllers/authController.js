const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const config = require("../configuration/config");
const faceapi = require("face-api.js");
const Class = require("../models/Class");

const multer = require("multer");
const axios = require("axios");
const FormData = require("form-data");

// ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
exports.register = async (req, res) => {
  try {
    const { studentId, fullName } = req.body;

    const foundById = await User.findOne({ studentId });
    const foundByName = await User.findOne({ fullName });

    // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™
    if (!foundById && !foundByName) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?" });
    }

    // ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
    if (!foundById || !foundByName) {
      return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    }

    // ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const strippedId = studentId.replace(/-/g, ""); // ‡∏ï‡∏±‡∏î‡∏Ç‡∏µ‡∏î‡∏≠‡∏≠‡∏Å

    const username = strippedId;
    const password_hash = await bcrypt.hash(strippedId, 10); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î

    foundById.username = username;
    foundById.password_hash = password_hash;
    await foundById.save();

    res.json({ username, password: strippedId });
  } catch (err) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};

// Login ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ username ‡∏´‡∏£‡∏∑‡∏≠ studentId ‡∏´‡∏£‡∏∑‡∏≠ email
exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;

    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å DB ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ó‡∏±‡πâ‡∏á 3 ‡∏ä‡πà‡∏≠‡∏á
    const user = await User.findOne({
      $or: [
        { username },
        { studentId: username },
        { email: username }
      ]
    });

    if (!user) {
      return res.status(401).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö role
    if (user.role === "student") {
      const cleanStudentId = user.studentId.replace(/-/g, "");
      if (cleanStudentId !== username) {
        return res.status(401).json({ message: "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
      }
    }

    if (user.role === "teacher" && user.email !== username) {
      return res.status(401).json({ message: "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Email ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    if (user.role === "admin" && user.studentId.replace(/-/g, "") !== username && user.username !== username) {
      return res.status(401).json({ message: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Username ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const valid = await bcrypt.compare(password, user.password_hash);
    if (!valid) {
      return res.status(401).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
    const token = jwt.sign({ id: user._id, role: user.role }, config.jwt.secret, {
      expiresIn: config.jwt.expiresIn,
    });

    res.json({ token, user });

  } catch (err) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", error: err.message });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á studentId + fullName ‡∏Å‡∏•‡∏±‡∏ö
exports.saveFaceImagesToModel = async (req, res) => {
  try {
    const { fullname, studentID } = req.body;
    const files = req.files;

    console.log("üì• Received save-face-model request");
    console.log("   fullname:", fullname, "studentID:", studentID);
    console.log("   Files received:", Object.keys(files || {})); // ‚úÖ log keys ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏≤

    const requiredKeys = ["front", "left", "right", "up", "down"];
    for (const key of requiredKeys) {
      if (!files[key]) {
        return res.status(400).json({ status: "error", message: `Missing ${key} image` });
      }
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ Python
    const form = new FormData();
    form.append("fullname", fullname);
    form.append("studentID", studentID);
    requiredKeys.forEach((key) => {
      form.append(key, files[key][0].buffer, `${key}.jpg`);
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å model
    const response = await axios.post("https://face-api-md-1e957aa5dacb.herokuapp.com/api/verify-face", form, {
      headers: form.getHeaders(),
      maxContentLength: Infinity,
      maxBodyLength: Infinity
    });

    const result = response.data;

    if (!result.verified) {
      return res.json({ status: "not_verified", matchCount: result.matchCount ?? 0 });
    }

    // --- verified = true ---
    // 1) ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å DB (‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô schema: ‡∏™‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡πÉ‡∏ä‡πâ fullName / studentId)
    const user = await User.findOne({
      $or: [{ studentId: studentID }, { fullName: fullname }]
    });

    if (!user) {
      return res.status(404).json({ status: "error", message: "User not found for saving face data" });
    }

    // 2) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á 5 ‡∏°‡∏∏‡∏° + mark faceScanned
    //    ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ (‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢):
    //    user.faceEncodings = { front: [...], left: [...], right: [...], up: [...], down: [...] }
    user.faceEncodings = result.encodings; // object {front,left,right,up,down}
    user.faceScanned = true;

    await user.save();

    // 3) ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ frontend
    return res.json({
      status: "verified",
      matchCount: result.matchCount,
      user: {
        id: user._id,
        fullName: user.fullName,
        studentId: user.studentId,
        faceScanned: user.faceScanned
      }
    });

  } catch (err) {
    console.error("Error saving face:", err);
    return res.status(500).json({ status: "error", message: "Internal server error", error: err.message });
  }
};

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
exports.saveTeacherFace = async (req, res) => {
  try {
    // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á login ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const userId = req.user?.id || req.user?._id;
    if (!userId) {
      return res.status(401).json({ ok: false, code: 'NO_USER_ID', message: 'Unauthorized' });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ ok: false, code: 'USER_NOT_FOUND', message: 'User not found' });
    }

    const role = String(user.role || '').trim().toLowerCase();
    if (role !== 'teacher') {
      return res.status(403).json({ ok: false, code: 'NOT_TEACHER', message: 'Forbidden: role' });
    }

    // ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß + fullname (‡∏à‡∏≤‡∏Å frontend)
    const file = req.file; // multer.single("image")
    const { fullname } = req.body || {};

    if (!file) {
      return res.status(400).json({ ok: false, code: 'NO_IMAGE', message: 'image is required' });
    }
    if (!fullname || !fullname.trim()) {
      return res.status(400).json({ ok: false, code: 'NO_NAME', message: 'fullname is required' });
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ + fullname ‡πÑ‡∏õ‡∏´‡∏≤ Model (/api/teacher-saveface)
    const MODEL_BASE_URL = process.env.MODEL_BASE_URL || 'https://face-api-md-8a3c744d4816.herokuapp.com';
    const form = new FormData();
    form.append('image', file.buffer, { filename: file.originalname, contentType: file.mimetype });
    form.append('fullname', fullname.trim());

    const { data } = await axios.post(`${MODEL_BASE_URL}/api/teacher-saveface`, form, {
      headers: form.getHeaders(), // ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á Content-Type ‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ form ‡∏Å‡∏≥‡∏´‡∏ô‡∏î boundary
      timeout: 15_000,
      maxContentLength: Infinity,
      maxBodyLength: Infinity,
    });

    if (!data?.ok) {
      return res.status(400).json({
        ok: false,
        code: 'ENCODE_FAILED',
        message: data?.message || 'encode failed',
      });
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å descriptor + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏á Mongo
    user.faceEncodings = data.descriptor;            // Array length 128
    user.faceScanned = true;                          // ‡πÄ‡∏Ñ‡∏¢‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    user.faceImagePath = data.imagePath || null;      // "teacher/<folder>/<folder>.jpg"
    user.personKey = data.personKey || null;          // "<folder>" ‡∏´‡∏•‡∏±‡∏á sanitize
    user.faceSavedAt = new Date();
    await user.save();

    return res.json({
      ok: true,
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      teacher: { id: user._id, fullName: fullname.trim() },
      imagePath: user.faceImagePath,
    });
  } catch (err) {
    console.error('Save teacher face failed:', err);
    return res.status(500).json({
      ok: false,
      code: 'INTERNAL_ERROR',
      message: 'Save teacher face failed',
      error: err?.message,
    });
  }
};

// ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‚Üí ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
exports.newRegister = async (req, res) => {
  try {
    const { studentId, fullName, email } = req.body;

    //  ‡∏•‡∏ö‡∏Ç‡∏µ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á username/password
    const strippedId = studentId.replace(/-/g, "");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    if (!/^s\d{13}@email\.kmutnb\.ac\.th$/.test(email) || email !== `s${strippedId}@email.kmutnb.ac.th`) {
      return res.status(400).json({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" });
    }

    if (!/^(‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß|‡∏ô‡∏≤‡∏á)/.test(fullName)) {
      return res.status(400).json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡∏ô‡∏≤‡∏¢, ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏á" });
    }

    if (!/^\d{2}-\d{6}-\d{4}-\d{1}$/.test(studentId)) {
      return res.status(400).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö xx-xxxxxx-xxxx-x" });
    }

    const exists = await User.findOne({ studentId });
    if (exists) {
      return res.status(409).json({ message: "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const password_hash = await bcrypt.hash(strippedId, 10);

    const newUser = new User({
      studentId,            // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Ç‡∏µ‡∏î
      fullName,
      email,
      username: strippedId, // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î
      password_hash,
      role: "student",
    });

    await newUser.save();

    res.json({
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      username: strippedId,
      password: strippedId,
    });
  } catch (err) {
    res.status(500).json({
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      error: err.message,
    });
  }
};
