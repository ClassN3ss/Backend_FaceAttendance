const CheckinSession = require("../models/CheckinSession");

exports.openSession = async (req, res) => {
  try {
    const { classId, openAt, closeAt, withTeacherFace, location, withMapPreview } = req.body;

    if (!openAt || !closeAt) {
      return res.status(400).json({ message: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô" });
    }

    const open = new Date(openAt);
    const close = new Date(closeAt);

    if (isNaN(open) || isNaN(close)) {
      return res.status(400).json({ message: "‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const overlap = await CheckinSession.findOne({
      classId,
      status: "active",
      $or: [
        { openAt: { $lt: close }, closeAt: { $gt: open } },
      ],
    });

    if (overlap) {
      return res.status(400).json({ message: "‚ùå ‡∏°‡∏µ session ‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const session = await CheckinSession.create({
      classId,
      openAt: open,
      closeAt: close,
      withTeacherFace: !!withTeacherFace,
      withMapPreview: !!withMapPreview,
      status: "active",
      location: {
        latitude: location?.latitude ?? null,
        longitude: location?.longitude ?? null,
        radiusInMeters: location?.radiusInMeters ?? 100,
        name: location?.name ?? null,
      },
    });

    res.status(201).json({ message: "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß", session });
  } catch (err) {
    res.status(500).json({ message: "‚ùå ‡πÄ‡∏õ‡∏¥‡∏î session ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error: err.message });
  }
};

exports.cancelSession = async (req, res) => {
  try {
    const { id } = req.params;
    const session = await CheckinSession.findById(id);
    if (!session) return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö session" });

    session.status = "cancelled";
    await session.save();
    res.json({ message: "üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å session ‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    res.status(500).json({ message: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error: err.message });
  }
};

exports.autoExpireSessions = async () => {
  try {
    const now = new Date();
    console.log("üïí Running expire session check at:", now.toISOString());
    const expiredSessions = await CheckinSession.updateMany(
      { status: "active", closeAt: { $lt: now } },
      { $set: { status: "expired" } }
    );
    console.log(`‚è∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${expiredSessions.modifiedCount} sessions`);
  } catch (err) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤:", err.message);
  }
};

exports.getActiveSessions = async (req, res) => {
  try {
    const now = new Date();
    const sessions = await CheckinSession.find({
      status: "active",
      openAt: { $lte: now },
      closeAt: { $gte: now },
    }).populate("classId", "courseName section");

    res.json(sessions);
  } catch (err) {
    res.status(500).json({ message: "‚ùå ‡πÇ‡∏´‡∏•‡∏î session ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error: err.message });
  }
};

// controllers/checkinSessionController.js

exports.getActiveSessionByClass = async (req, res) => {
  try {
    const { classId } = req.params;
    const now = new Date();

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° buffer ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô
    const nowPlus10Sec = new Date(now.getTime() + 10000);
    const nowMinus10Sec = new Date(now.getTime() - 10000);

    const session = await CheckinSession.findOne({
      classId,
      status: "active",
      openAt: { $lte: nowPlus10Sec },     // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ session ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏µ‡πâ
      closeAt: { $gte: nowMinus10Sec }    // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà expired ‡πÄ‡∏õ‡πä‡∏∞ ‡πÜ
    });

    res.set("Cache-Control", "no-store");

    if (!session) return res.status(204).json();
    res.json(session);

  } catch (error) {
    res.status(500).json({
      message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î session",
      error: error.message,
    });
  }
};
